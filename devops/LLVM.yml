trigger: none

pr: none

jobs:
############################################## Linux Builds
- job:
  displayName: LLVM Linux Build
  pool:
    vmImage: ubuntu-20.04
  timeoutInMinutes: 240
  strategy:
    matrix:
      Clang Release:
        CC: clang
        CXX: clang++
        CXXFLAGS: -stdlib=libstdc++
        BuildType: Release
        BuildName: release
        Sanitizer:
  variables:
  - name: PKG_NAME
    value: monza-llvm-install-x86_64-linux-$(BuildName)
  steps:
  - checkout: self
    submodules: true

  - script: |
      set -eo pipefail
      sudo apt-get update
      sudo apt-get install -y clang ninja-build lld
      sudo snap install cmake --classic
      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    displayName: 'Install Build Dependencies'
  - script: |
      git apply ../patches/llvm-libcxx.patch
      git apply ../patches/llvm-clang.patch
    displayName: Patch LLVM
    workingDirectory: external/llvm-project
  - task: CMake@1
    displayName: 'CMake'
    inputs:
      cmakeArgs: |
        ../external/llvm-project/llvm -GNinja -DCMAKE_BUILD_TYPE=$(BuildType) -DCMAKE_C_COMPILER=$(CC) -DCMAKE_CXX_COMPILER=$(CXX) -DCMAKE_CXX_FLAGS=$(CXXFLAGS) -DLLVM_USE_SANITIZER=$(Sanitizer) -DLLVM_ENABLE_PROJECTS="clang;clang-tools;lld;libcxxabi;libcxx;compiler-rt" -DLLVM_TARGETS_TO_BUILD="X86;WebAssembly" -DLLVM_ENABLE_ASSERTIONS=ON -DLLVM_ENABLE_LLD=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DCMAKE_INSTALL_PREFIX=install -DMLIR_INCLUDE_TESTS=OFF
  - script: |
      set -eo pipefail
      ninja install
    workingDirectory: build
    displayName: 'Compile LLVM & MLIR'
  - script: |
      set -eo pipefail
      cd ../external/llvm-project
      ACTUAL_HASH="`git rev-parse HEAD`-`md5sum ../patches/llvm-libcxx.patch | awk '{print $1}'`-`md5sum ../patches/llvm-clang.patch | awk '{print $1}'`"
      FINAL_PACKAGE_NAME="$(PKG_NAME)-$ACTUAL_HASH.tar.gz"
      echo "Package name is: $FINAL_PACKAGE_NAME"
      cd ../../build
      rm -f $FINAL_PACKAGE_NAME
      tar zcf $FINAL_PACKAGE_NAME install
      md5sum $FINAL_PACKAGE_NAME | awk '{print $1}' > $FINAL_PACKAGE_NAME.md5
      az storage blob upload --overwrite --container-name llvmbuild --file $FINAL_PACKAGE_NAME --name $FINAL_PACKAGE_NAME --account-name verona --sas-token "$(BLOB_SAS_TOKEN)"
      az storage blob upload --overwrite --container-name llvmbuild --file $FINAL_PACKAGE_NAME.md5 --name $FINAL_PACKAGE_NAME.md5 --account-name verona --sas-token "$(BLOB_SAS_TOKEN)"
    displayName: 'Create and upload package'
    workingDirectory: build
